package com.example.boot.security;

import org.springframework.context.annotation.Bean;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.password.Md4PasswordEncoder;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.crypto.password.Pbkdf2PasswordEncoder;

@EnableWebSecurity
public class StudentSecurity  extends WebSecurityConfigurerAdapter {
	 
	 /**
		 * Authentication
		 */
	
	  @Override protected void configure(AuthenticationManagerBuilder auth) throws
	  Exception {
	  auth.inMemoryAuthentication().withUser("student").password("pass").roles(
	  "USER").and().withUser("teacher") .password("pass1").roles("ADMIN"); }
	  
	 /**
		 * Authorization
		 */
			  @Override protected void configure(HttpSecurity http) throws Exception {
			  http.authorizeRequests().antMatchers("/admin").hasRole("ADMIN").antMatchers(
			  "/user").hasAnyRole("ADMIN", "USER") .antMatchers("/", "/static/css",
			  "/static/js","/h2-console/**").permitAll().and().formLogin(); }
			  
			  @Override public void configure(WebSecurity web) throws Exception { web
			  .ignoring() .antMatchers("/h2-console/**"); }
			  
			  
			  @Bean public PasswordEncoder getPasswordEncoder() { return
			  NoOpPasswordEncoder.getInstance(); }
			 
}
